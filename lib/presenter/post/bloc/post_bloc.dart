import 'dart:async';import 'package:bloc/bloc.dart';import 'package:flutter_bloc_app/data/rest_client.dart';import 'package:freezed_annotation/freezed_annotation.dart';import '../../../domain/entities/task.dart';part 'post_event.dart';part 'post_state.dart';part 'post_bloc.freezed.dart';class PostBloc extends Bloc<PostEvent, PostState> {  final RestClient client;  PostBloc(this.client) : super(const PostState.loading()) {    add(const PostEvent.loadData());  }  List<Task>? list;  @override  Stream<PostState> mapEventToState(PostEvent event) async* {    yield* event.when(      loadData: () async* {        yield const PostState.loading();        try {          final _list = await client.getTasks();          yield PostState.loaded(_list);        } catch (e) {          yield PostState.error(e);        }      },    );  }}